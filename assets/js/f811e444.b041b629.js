(self.webpackChunkpistache_io=self.webpackChunkpistache_io||[]).push([[1],{6069:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return d},default:function(){return c}});var n=a(2122),i=a(9756),r=(a(7294),a(3905)),s=["components"],o={title:"Routing"},l=void 0,p={unversionedId:"routing",id:"routing",isDocsHomePage:!1,title:"Routing",description:"\x3c!--",source:"@site/docs/routing.md",sourceDirName:".",slug:"/routing",permalink:"/pistache/docs/routing",editUrl:"https://github.com/pistacheio/pistache/edit/master/pistache.io/docs/routing.md",version:"current",frontMatter:{title:"Routing"},sidebar:"leftSidebar",previous:{title:"REST description",permalink:"/pistache/docs/rest-description"}},d=[{value:"HTTP methods",id:"http-methods",children:[]},{value:"Route patterns",id:"route-patterns",children:[{value:"Static routes",id:"static-routes",children:[]},{value:"Dynamic routes",id:"dynamic-routes",children:[]}]},{value:"Defining routes",id:"defining-routes",children:[{value:"Callbacks",id:"callbacks",children:[]},{value:"Installing the handler",id:"installing-the-handler",children:[]}]}],u={toc:d};function c(e){var t=e.components,a=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"HTTP routing consists of binding an HTTP route to a C++ callback. A special component called an HTTP router will be in charge of dispatching HTTP requests to the right C++ callback. A route is composed of an HTTP verb associated to a resource:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"GET /users/1\n")),(0,r.kt)("p",null,"Here, ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," is the verb and ",(0,r.kt)("inlineCode",{parentName:"p"},"/users/1")," is the associated resource."),(0,r.kt)("h2",{id:"http-methods"},"HTTP methods"),(0,r.kt)("p",null,"A bunch of HTTP methods (verbs) are supported by Pistache:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"GET"),": The ",(0,r.kt)("inlineCode",{parentName:"li"},"GET")," method is used by the client (e.g browser) to retrieve a resource identified by an URI. For example, to retrieve an user identified by an id, a client will issue a ",(0,r.kt)("inlineCode",{parentName:"li"},"GET")," to the ",(0,r.kt)("inlineCode",{parentName:"li"},"/users/:id")," Request-URI."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"POST"),": the ",(0,r.kt)("inlineCode",{parentName:"li"},"POST")," method is used to post or send new information to a certain resource. The server will then read and store the data associated to the request. ",(0,r.kt)("inlineCode",{parentName:"li"},"POST")," is a common way of transmitting data from an HTML form. ",(0,r.kt)("inlineCode",{parentName:"li"},"POST")," can also be used to create a new resource or update information of an existing resource. For example, to create a new user, a client will issue a ",(0,r.kt)("inlineCode",{parentName:"li"},"POST")," to the ",(0,r.kt)("inlineCode",{parentName:"li"},"/users")," path with the data of the user to create in its body."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"PUT"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"PUT")," is very similar to ",(0,r.kt)("inlineCode",{parentName:"li"},"POST")," except that ",(0,r.kt)("inlineCode",{parentName:"li"},"PUT")," is idempotent, meaning that two requests to the same Request-URI with the same identical content should have the same effect and should produce the same result."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"DELETE"),": the ",(0,r.kt)("inlineCode",{parentName:"li"},"DELETE")," method is used to delete a resource associated to a given Request-URI. For example, to remove an user, a client might issue a ",(0,r.kt)("inlineCode",{parentName:"li"},"DELETE")," call to the ",(0,r.kt)("inlineCode",{parentName:"li"},"/users/:id")," Request-URI.")),(0,r.kt)("p",null,"To sum up, ",(0,r.kt)("inlineCode",{parentName:"p"},"POST")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"PUT")," are used to Create and/or Update, ",(0,r.kt)("inlineCode",{parentName:"p"},"GET")," is used to Read and ",(0,r.kt)("inlineCode",{parentName:"p"},"DELETE")," is used to Delete information."),(0,r.kt)("h2",{id:"route-patterns"},"Route patterns"),(0,r.kt)("h3",{id:"static-routes"},"Static routes"),(0,r.kt)("p",null,"Static routes are the simplest ones as they do rely on dynamic parts of the Request-URI. For example ",(0,r.kt)("inlineCode",{parentName:"p"},"/users/all")," is a static route that will exactly match the ",(0,r.kt)("inlineCode",{parentName:"p"},"/users/all")," Request-URI."),(0,r.kt)("h3",{id:"dynamic-routes"},"Dynamic routes"),(0,r.kt)("p",null,"However, it is often useful to define routes that have dynamic parts. For example, to retrieve a specific user by its id, the id is needed to query the storage. Dynamic routes thus have parameters that are then matched one by one by the HTTP router. In a dynamic route, parameters are identified by a column ",(0,r.kt)("inlineCode",{parentName:"p"},":")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"/users/:id")),(0,r.kt)("p",null,"Here, ",(0,r.kt)("inlineCode",{parentName:"p"},":id")," is a dynamic parameter. When a request comes in, the router will try to match the ",(0,r.kt)("inlineCode",{parentName:"p"},":id")," parameter to the corresponding part of the request. For example, if the server receives a request to ",(0,r.kt)("inlineCode",{parentName:"p"},"/users/13"),", the router will match the ",(0,r.kt)("inlineCode",{parentName:"p"},"13")," value to the ",(0,r.kt)("inlineCode",{parentName:"p"},":id")," parameter."),(0,r.kt)("p",null,"Some parameters, like ",(0,r.kt)("inlineCode",{parentName:"p"},":id")," are named. However, Pistache also allows ",(0,r.kt)("em",{parentName:"p"},"splat")," (wildcard) parameters, identified by a star ",(0,r.kt)("inlineCode",{parentName:"p"},"*"),":"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"/link/*/to/*")),(0,r.kt)("h2",{id:"defining-routes"},"Defining routes"),(0,r.kt)("p",null,"To define your routes, you first have to instantiate an HTTP router:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"Http::Router router;\n")),(0,r.kt)("p",null,"Then, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Routes::<Method>()")," functions to add some routes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'Routes::Get(router, "/users/all", Routes::bind(&UsersApi::getAllUsers, this));\nRoutes::Post(router, "/users/:id", Routes::bind(&UsersApi::getUserId, this));\nRoutes::Get(router, "/link/*/to/*", Routes::bind(&UsersApi::linkUsers, this));\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Routes::bind")," is a special function that will generate a corresponding C++ callback that will then be called by the router if a given route matches the Request-URI."),(0,r.kt)("h3",{id:"callbacks"},"Callbacks"),(0,r.kt)("p",null,"A C++ callback associated to a route must have the following signature:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"void(const Rest::Request&, Http::ResponseWriter);\n")),(0,r.kt)("p",null,"A callback can either be a non-static free or member function. For member functions, a pointer to the corresponding instance must be passed to the Routes::bind function so that the router knows on which instance to invoke the member function."),(0,r.kt)("p",null,"The first parameter of the callback is ",(0,r.kt)("inlineCode",{parentName:"p"},"Rest::Request")," and not an ",(0,r.kt)("inlineCode",{parentName:"p"},"Http::Request"),". A ",(0,r.kt)("inlineCode",{parentName:"p"},"Rest::Request")," is an ",(0,r.kt)("inlineCode",{parentName:"p"},"Http::Request")," with additional functions. Named and splat parameters are for example retrieved through this object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'void UsersApi::getUserId(const Rest::Request& request, Http::ResponseWriter response) {\n    auto id = request.param(":id").as<int>();\n    // ...\n}\n\nvoid UsersApi::linkUsers(const Rest::Request& request, Http::ResponseWriter response) {\n    auto u1 = request.splatAt(0).as<std::string>();\n    auto u2 = request.splatAt(1).as<std::string>();\n    // ...\n}\n')),(0,r.kt)("p",null,"As you can see, parameters are also typed. To cast a parameter to the appropriate type, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"as<T>")," member template."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"Cast safety")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"An exception will be thrown if the parameter can not be casted to the right type"))),(0,r.kt)("h3",{id:"installing-the-handler"},"Installing the handler"),(0,r.kt)("p",null,"Once the routes have been defined, the final ",(0,r.kt)("inlineCode",{parentName:"p"},"Http::Handler")," must be set to the HTTP Endpoint. To retrieve the handler, just call the ",(0,r.kt)("inlineCode",{parentName:"p"},"handler()")," member function on the router object:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"endpoint.setHandler(router.handler());\n")))}c.isMDXComponent=!0}}]);